/*=============================================================================
    Copyright (c) 2001-2010 Joel de Guzman

    Distributed under the Boost Software License, Version 1.0. (See accompanying
    file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
==============================================================================*/
#include "../measure.hpp"
#include <string>
#include <vector>
#include <cstdlib>
#include <boost/spirit/include/qi.hpp>
#include "double-conversion.h"

namespace
{   
    static const std::string numbers[] =
    {
        "1234",
        "-1.2e3",
        "0.1",
        "-1.2e-3",
        "-.2e3",
        "-2e6",
        "1.2345e5",
        "-5.7222349715140557e+307",
        "2.0332938517515416e-308",

        // constants from clang 3.6 on x86_64
        "1.7976931348623157e+308", // DBL_MAX
        "2.2204460492503131e-16",  // DBL_EPSILON
        "2.2250738585072014e-308", // DBL_MIN
        "4.9406564584124654e-324", // DBL_DENORM_MIN

        // and a selection from https://strtk.googlecode.com/svn/trunk/strtk_tokenizer_cmp.cpp
                                   "+004",                     "+005",                      "+006",               "+007",
                                   "+929",                      "766",                       "152",                "482",
                        "7379973.6624700",         "-2187496.9290991",            "384281.3720002",   "-6603499.4918257",
                                      "0",                        "1",                         "2",                  "3",
                                    "879",                     "+130",                       "292",                "705",
                                  "00000",                    "00001",                     "00002",              "00003",
                       "-8017367.1481995",           "633693.2789865",           "-734898.6366299",    "+295494.2335175",
                                                  "+1.0", "+2.0", "+3.0", "+4.0", "+5.0", "+6.0", "+7.0", "+8.0", "+9.0",
                       "+6924520.6426735",         "-8219629.8338549",           "7201183.8124936",   "-4505255.6409222",
                                    "708",                     "-467",                      "-794",                "610",
                       "-4125977.4243394",         "+7770880.2044321",           "-936309.6851826",    "7140657.6729261",
                        "3374994.2530944",         "-5933062.7257800",          "+8664205.9476258",   "-7144810.5337246",
                                   "-317",                      "109",                      "-888",                "302",
                                    "674",                     "+467",                      "+706",                "889",
                                           "-.0",  "-.1",  "-.2",  "-.3",  "-.4",  "-.5",  "-.6",  "-.7",  "-.8",  "-.9",
                                           "+.0",  "+.1",  "+.2",  "+.3",  "+.4",  "+.5",  "+.6",  "+.7",  "+.8",  "+.9",
                                   "-840",                      "267",                       "201",                "533",
                                  "-0000",                    "-0001",                     "-0002",              "-0003",
                      "03374994.25309440",       "-05933062.72578000",        "+08664205.94762580", "-07144810.53372460",
                                    "363",                     "-627",                       "129",               "+656",
                      "+0391059.70005360",        "08018726.47909600",        "-07762532.52738580",  "+0191677.58537590",
                                                           "1.0", "2.0", "3.0", "4.0", "5.0", "6.0", "7.0", "8.0", "9.0",
                     "-02610193.23338290",       "-05536426.67419050",         "09868713.74445040", "-04187461.84990080",
                                    "870",                      "147",                       "898",               "-510",
                                     "-4",                       "-5",                        "-6",                 "-7",
                       "08623428.8529150",        "02932018.49830140",        "-09816436.72970750",  "02183188.58659720",
                                                   "-1.0", "-2.0", "-3.0", "-4.0", "-5.0", "-6.0", "-7.0","-8.0", "-9.0",
                     "-04663787.27402000",        "-08719869.9822470",        "+08001455.68056840",  "-01800837.1690770",
                                   "+000",                     "+001",                      "+002",               "+003",
                     "+06987314.11422220",        "+0112136.87073620",        "-02120543.96610760", "+03903634.53641490",
                                   "+473",                       "74",                       "374",                "-64",
                     "-05446002.77153270",       "-04552784.60364020",         "06178318.60245260",  "-0340491.53994340",
                       "07557628.4385290",        "03899301.70689570",         "-0292643.48119340",  "08639015.45291470",
                                    "704",                     "-568",                      "+301",                "951",
                     "-01566675.10980440",       "-03695567.66366290",        "+05888357.88912280",  "-0550930.46713720",
                      ".00e+0", ".01e+1", ".02e+2", ".03e+3", ".04e+4", ".05e+5", ".06e+6", ".07e+7", ".08e+8", ".09e+9",
                      ".0e+00", ".1e+01", ".2e+02", ".3e+03", ".4e+04", ".5e+05", ".6e+06", ".7e+07", ".8e+08", ".9e+09",
                         "0.668364937915",          "-0.491401141241",           "-0.333129579862",    "-0.365807899800",
                                     "+0",                       "+1",                        "+2",                 "+3",
                                  "00004",                    "00005",                     "00006",              "00007",
                                   "-463",                      "716",                       "916",                "665",
                        "-0.742998928523",          "+0.795740637927",           "+0.738890192202",     "0.838420189244",
                                   "+290",                      "823",                      "+111",                "715",
                         "0.136955290570",          "-0.528184172516",           "-0.922485979112",    "-0.832170413268",
                        "-0.945828557068",           "0.879257644420",            "0.244450812369",    "+0.305035653490",
                                   "+535",                      "691",                      "+326",               "-409",
                        "+0.125634105601",          "-0.194399721385",           "-0.820243318264",    "-0.880230396260",
                        "-0.360550459424",          "+0.565867297929",           "+0.443986746193",     "0.327767716805",
                                    "172",                     "+282",                      "-795",                "188",
                         "0.586630908690",          "-0.605294588008",           "-0.517170498609",    "-0.883414731381",
                                                    "123.456e3",                "123.456E3",                "123.456e+3",
                                                   "123.456E+3",               "123.456e03",                "123.456E03",
                                                  "123.456e+03",              "123.456E+03",              "123.456e0003",
                                                 "123.456E0003",            "123.456e+0003",             "123.456E+0003",
                       ".0E+0",  ".1E+1",  ".2E+2",  ".3E+3",  ".4E+4",  ".5E+5",  ".6E+6",  ".7E+7",  ".8E+8",  ".9E+9",
                      "+.0e+0", "+.1e+1", "+.2e+2", "+.3e+3", "+.4e+4", "+.5e+5", "+.6e+6", "+.7e+7", "+.8e+8", "+.9e+9",
                                                   "123.4560e3",              "123.45600E3",             "123.456000e+3",
                                                "123.456000E+3",           "123.4560000e03",           "123.45600000E03",
                                            "123.456000000e+03",       "123.4560000000E+03",      "123.45600000000e0003",
                                        "123.456000000000E0003",  "123.4560000000000e+0003",  "123.45600000000000E+0003",
                                               "+0123.456e+003",          "-00123.456E+003",           "+000123.45600E3",
                                                   "-123.456e3",               "+123.456E3",               "-123.456e+3",
                                                  "+123.456E+3",              "-123.456e03",               "+123.456E03",
                                                 "-123.456e+03",             "+123.456E+03",             "-123.456e0003",
                                                    "+0.", "+1.", "+2.", "+3.", "+4.", "+5.", "+6.", "+7.", "+8.", "+9.",
                                                    "-0.", "-1.", "-2.", "-3.", "-4.", "-5.", "-6.", "-7.", "-8.", "-9.",
                                                "+123.456E0003",           "-123.456e+0003",            "+123.456E+0003",
                                                  "-123.4560e3",             "+123.45600E3",            "-123.456000e+3",
                                               "+123.456000E+3",          "-123.4560000e03",          "+123.45600000E03",
                                           "-123.456000000e+03",      "+123.4560000000E+03",     "-123.45600000000e0003",
                                                     "0.",  "1.",  "2.",  "3.",  "4.",  "5.",  "6.",  "7.",  "8.",  "9.",
                                                     ".0",  ".1",  ".2",  ".3",  ".4",  ".5",  ".6",  ".7",  ".8",  ".9",
                                       "+123.456000000000E0003", "-123.4560000000000e+0003", "+123.45600000000000E+0003",
                                               "-0123.456e+003",          "+00123.456E+003",           "-000123.45600E3",
                                          "000000123.456e+0003",                      "0.0",                     "00.00",
                                                      "000.000",                "0000.0000",                     "1234.",
                                                         "01.2",                 "0012.340",               "00012.34500",
                                          "+0.0", "+1.0", "+2.0", "+3.0", "+4.0", "+5.0", "+6.0", "+7.0", "+8.0", "+9.0",
                                           "-0.595932",  "+0.780005", "-0.892725",  "0.241765", "-0.168054", "+0.687922",
                                           "+0.326186",  "-0.557688",  "0.524772", "-0.316610", "+0.451794", "-0.233149",
                       ".0e+0",  ".1e+1",  ".2e+2",  ".3e+3",  ".4e+4",  ".5e+5",  ".6e+6",  ".7e+7",  ".8e+8",  ".9e+9",
                      "-.0e+0", "-.1e+1", "-.2e+2", "-.3e+3", "-.4e+4", "-.5e+5", "-.6e+6", "-.7e+7", "-.8e+8", "-.9e+9",
                                           "-0.513733",   "0.827170", "-0.324329", "+0.944863", "-0.824447",  "0.963773",
                                            "0.782587",  "-0.941195", "+0.977240", "-0.140493",  "0.884950", "-0.503467",
                      ".00E+0", ".01E+1", ".02E+2", ".03E+3", ".04E+4", ".05E+5", ".06E+6", ".07E+7", ".08E+8", ".09E+9",
                      ".0E+00", ".1E+01", ".2E+02", ".3E+03", ".4E+04", ".5E+05", ".6E+06", ".7E+07", ".8E+08", ".9E+09",
                                           "-0.609128",  "+0.480234", "-0.125272", "+0.404477", "-0.687858", "+0.454091",
                                           "+0.628872",  "-0.438190",  "0.779150", "-0.965766", "+0.384968", "-0.620200",
                                           "-0.681751",   "0.517473", "-0.700753", "+0.940319", "-0.882250",  "0.591237",
                                           "0.0",  "1.0",  "2.0",  "3.0",  "4.0",  "5.0",  "6.0",  "7.0",  "8.0",  "9.0",
                    "0000000011.0000000011", "0000000022.0000000022",  "0000000033.0000000033",  "0000000044.0000000044",
                    "0000000111.0000000111", "0000000222.0000000222",  "0000000333.0000000333",  "0000000444.0000000444",
                    "0000001111.0000001111", "0000002222.0000002222",  "0000003333.0000003333",  "0000004444.0000004444",
                    "0000011111.0000011111", "0000022222.0000022222",  "0000033333.0000033333",  "0000044444.0000044444",
                    "0000111111.0000111111", "0000222222.0000222222",  "0000333333.0000333333",  "0000444444.0000444444",
                    "0001111111.0001111111", "0002222222.0002222222",  "0003333333.0003333333",  "0004444444.0004444444",
                    "0011111111.0011111111", "0022222222.0022222222",  "0033333333.0033333333",  "0044444444.0044444444",
                    "0111111111.0111111111", "0222222222.0222222222",  "0333333333.0333333333",  "0444444444.0444444444",
                      "-000000011.000000011",  "-000000022.000000022",   "-000000033.000000033",  "-000000044.000000044",
                      "-000000111.000000111",  "-000000222.000000222",   "-000000333.000000333",  "-000000444.000000444",
                      "-000001111.000001111",  "-000002222.000002222",   "-000003333.000003333",  "-000004444.000004444",
                      "-000011111.000011111",  "-000022222.000022222",   "-000033333.000033333",  "-000044444.000044444",
                      "-000111111.000111111",  "-000222222.000222222",   "-000333333.000333333",  "-000444444.000444444",
                      "-001111111.001111111",  "-002222222.002222222",   "-003333333.003333333",  "-004444444.004444444",
                      "-011111111.011111111",  "-022222222.022222222",   "-033333333.033333333",  "-044444444.044444444",
                      "-111111111.111111111",  "-222222222.222222222",   "-333333333.333333333",  "-444444444.444444444",
                      "-000000088.000000088", "0000000055.0000000055",  "0000000066.0000000066", "0000000077.0000000077",
                      "-000000888.000000888", "0000000555.0000000555",  "0000000666.0000000666", "0000000777.0000000777",
                      "-000008888.000008888", "0000005555.0000005555",  "0000006666.0000006666", "0000007777.0000007777",
                      "-000088888.000088888", "0000055555.0000055555",  "0000066666.0000066666", "0000077777.0000077777",
                      "-000888888.000888888", "0000555555.0000555555",  "0000666666.0000666666", "0000777777.0000777777",
                      "-008888888.008888888", "0005555555.0005555555",  "0006666666.0006666666", "0007777777.0007777777",
                      "-088888888.088888888", "0055555555.0055555555",  "0066666666.0066666666", "0077777777.0077777777",
                      "-888888888.888888888", "0555555555.0555555555",  "0666666666.0666666666", "0777777777.0777777777",
                     "0000000088.0000000088", "0000000099.0000000099",   "-000000055.000000055",  "-000000066.000000066",
                     "0000000888.0000000888", "0000000999.0000000999",   "-000000555.000000555",  "-000000666.000000666",
                     "0000008888.0000008888", "0000009999.0000009999",   "-000005555.000005555",  "-000006666.000006666",
                     "0000088888.0000088888", "0000099999.0000099999",   "-000055555.000055555",  "-000066666.000066666",
                     "0000888888.0000888888", "0000999999.0000999999",   "-000555555.000555555",  "-000666666.000666666",
                     "0008888888.0008888888", "0009999999.0009999999",   "-005555555.005555555",  "-006666666.006666666",
                     "0088888888.0088888888", "0099999999.0099999999",   "-055555555.055555555",  "-066666666.066666666",
                     "0888888888.0888888888", "0999999999.0999999999",   "-555555555.555555555",  "-666666666.666666666",
         "0000001234567890.0000001234567890", "+0000001234567890.0000001234567890", "-0000001234567890.0000001234567890",
           "000001234567890.000001234567890",   "+000001234567890.000001234567890",   "-000001234567890.000001234567890",
             "00001234567890.00001234567890",     "+00001234567890.00001234567890",     "-00001234567890.00001234567890",
               "0001234567890.0001234567890",       "+0001234567890.0001234567890",       "-0001234567890.0001234567890",
                 "001234567890.001234567890",         "+001234567890.001234567890",         "-001234567890.001234567890",
                   "01234567890.01234567890",           "+01234567890.01234567890",           "-01234567890.01234567890",
                     "1234567890.1234567890",             "+1234567890.1234567890",             "-1234567890.1234567890",
                       "0.1", "0.01", "0.001", "0.0001", "0.00001", "0.000001", "0.0000001", "0.00000001", "0.000000001",
                       "0.2", "0.02", "0.002", "0.0002", "0.00002", "0.000002", "0.0000002", "0.00000002", "0.000000002",
                       "0.3", "0.03", "0.003", "0.0003", "0.00003", "0.000003", "0.0000003", "0.00000003", "0.000000003",
                       "0.4", "0.04", "0.004", "0.0004", "0.00004", "0.000004", "0.0000004", "0.00000004", "0.000000004",
                       "0.5", "0.05", "0.005", "0.0005", "0.00005", "0.000005", "0.0000005", "0.00000005", "0.000000005",
                       "0.6", "0.06", "0.006", "0.0006", "0.00006", "0.000006", "0.0000006", "0.00000006", "0.000000006",
                       "0.7", "0.07", "0.007", "0.0007", "0.00007", "0.000007", "0.0000007", "0.00000007", "0.000000007",
                       "0.8", "0.08", "0.008", "0.0008", "0.00008", "0.000008", "0.0000008", "0.00000008", "0.000000008",
                       "0.9", "0.09", "0.009", "0.0009", "0.00009", "0.000009", "0.0000009", "0.00000009", "0.000000009",
              "+0.1", "+0.01", "+0.001", "+0.0001", "+0.00001", "+0.000001", "+0.0000001", "+0.00000001", "+0.000000001",
              "+0.2", "+0.02", "+0.002", "+0.0002", "+0.00002", "+0.000002", "+0.0000002", "+0.00000002", "+0.000000002",
              "+0.3", "+0.03", "+0.003", "+0.0003", "+0.00003", "+0.000003", "+0.0000003", "+0.00000003", "+0.000000003",
              "+0.4", "+0.04", "+0.004", "+0.0004", "+0.00004", "+0.000004", "+0.0000004", "+0.00000004", "+0.000000004",
              "+0.5", "+0.05", "+0.005", "+0.0005", "+0.00005", "+0.000005", "+0.0000005", "+0.00000005", "+0.000000005",
              "+0.6", "+0.06", "+0.006", "+0.0006", "+0.00006", "+0.000006", "+0.0000006", "+0.00000006", "+0.000000006",
              "+0.7", "+0.07", "+0.007", "+0.0007", "+0.00007", "+0.000007", "+0.0000007", "+0.00000007", "+0.000000007",
              "+0.8", "+0.08", "+0.008", "+0.0008", "+0.00008", "+0.000008", "+0.0000008", "+0.00000008", "+0.000000008",
              "+0.9", "+0.09", "+0.009", "+0.0009", "+0.00009", "+0.000009", "+0.0000009", "+0.00000009", "+0.000000009",
              "-0.1", "-0.01", "-0.001", "-0.0001", "-0.00001", "-0.000001", "-0.0000001", "-0.00000001", "-0.000000001",
              "-0.2", "-0.02", "-0.002", "-0.0002", "-0.00002", "-0.000002", "-0.0000002", "-0.00000002", "-0.000000002",
              "-0.3", "-0.03", "-0.003", "-0.0003", "-0.00003", "-0.000003", "-0.0000003", "-0.00000003", "-0.000000003",
              "-0.4", "-0.04", "-0.004", "-0.0004", "-0.00004", "-0.000004", "-0.0000004", "-0.00000004", "-0.000000004",
              "-0.5", "-0.05", "-0.005", "-0.0005", "-0.00005", "-0.000005", "-0.0000005", "-0.00000005", "-0.000000005",
              "-0.6", "-0.06", "-0.006", "-0.0006", "-0.00006", "-0.000006", "-0.0000006", "-0.00000006", "-0.000000006",
              "-0.7", "-0.07", "-0.007", "-0.0007", "-0.00007", "-0.000007", "-0.0000007", "-0.00000007", "-0.000000007",
              "-0.8", "-0.08", "-0.008", "-0.0008", "-0.00008", "-0.000008", "-0.0000008", "-0.00000008", "-0.000000008",
              "-0.9", "-0.09", "-0.009", "-0.0009", "-0.00009", "-0.000009", "-0.0000009", "-0.00000009", "-0.000000009",
                              "1.01", "0.101", "1.0101", "0.10101", "1.010101", "0.1010101", "1.01010101", "1.101010101",
                              "2.02", "0.202", "2.0202", "0.20202", "2.020202", "0.2020202", "2.02020202", "2.202020202",
                              "3.03", "0.303", "3.0303", "0.30303", "3.030303", "0.3030303", "3.03030303", "3.303030303",
                              "4.04", "0.404", "4.0404", "0.40404", "4.040404", "0.4040404", "4.04040404", "4.404040404",
                              "5.05", "0.505", "5.0505", "0.50505", "5.050505", "0.5050505", "5.05050505", "5.505050505",
                              "6.06", "0.606", "6.0606", "0.60606", "6.060606", "0.6060606", "6.06060606", "6.606060606",
                              "7.07", "0.707", "7.0707", "0.70707", "7.070707", "0.7070707", "7.07070707", "7.707070707",
                              "8.08", "0.808", "8.0808", "0.80808", "8.080808", "0.8080808", "8.08080808", "8.808080808",
                              "9.09", "0.909", "9.0909", "0.90909", "9.090909", "0.9090909", "9.09090909", "9.909090909",
                      "+1.01", "+0.101", "+1.0101", "+0.10101", "+1.010101", "+0.1010101", "+1.01010101", "+1.101010101",
                      "+2.02", "+0.202", "+2.0202", "+0.20202", "+2.020202", "+0.2020202", "+2.02020202", "+2.202020202",
                      "+3.03", "+0.303", "+3.0303", "+0.30303", "+3.030303", "+0.3030303", "+3.03030303", "+3.303030303",
                      "+4.04", "+0.404", "+4.0404", "+0.40404", "+4.040404", "+0.4040404", "+4.04040404", "+4.404040404",
                      "+5.05", "+0.505", "+5.0505", "+0.50505", "+5.050505", "+0.5050505", "+5.05050505", "+5.505050505",
                      "+6.06", "+0.606", "+6.0606", "+0.60606", "+6.060606", "+0.6060606", "+6.06060606", "+6.606060606",
                      "+7.07", "+0.707", "+7.0707", "+0.70707", "+7.070707", "+0.7070707", "+7.07070707", "+7.707070707",
                      "+8.08", "+0.808", "+8.0808", "+0.80808", "+8.080808", "+0.8080808", "+8.08080808", "+8.808080808",
                      "+9.09", "+0.909", "+9.0909", "+0.90909", "+9.090909", "+0.9090909", "+9.09090909", "+9.909090909",
                      "-1.01", "-0.101", "-1.0101", "-0.10101", "-1.010101", "-0.1010101", "-1.01010101", "-1.101010101",
                      "-2.02", "-0.202", "-2.0202", "-0.20202", "-2.020202", "-0.2020202", "-2.02020202", "-2.202020202",
                      "-3.03", "-0.303", "-3.0303", "-0.30303", "-3.030303", "-0.3030303", "-3.03030303", "-3.303030303",
                      "-4.04", "-0.404", "-4.0404", "-0.40404", "-4.040404", "-0.4040404", "-4.04040404", "-4.404040404",
                      "-5.05", "-0.505", "-5.0505", "-0.50505", "-5.050505", "-0.5050505", "-5.05050505", "-5.505050505",
                      "-6.06", "-0.606", "-6.0606", "-0.60606", "-6.060606", "-0.6060606", "-6.06060606", "-6.606060606",
                      "-7.07", "-0.707", "-7.0707", "-0.70707", "-7.070707", "-0.7070707", "-7.07070707", "-7.707070707",
                      "-8.08", "-0.808", "-8.0808", "-0.80808", "-8.080808", "-0.8080808", "-8.08080808", "-8.808080808",
                      "-9.09", "-0.909", "-9.0909", "-0.90909", "-9.090909", "-0.9090909", "-9.09090909", "-9.909090909"
    };
    static const int ndigits = sizeof(numbers) / sizeof(numbers[0]);

    char const* first[ndigits];
    char const* last[ndigits];

    ///////////////////////////////////////////////////////////////////////////
    struct atof_test : test::base
    {
        void benchmark()
        {
            for (int i = 0; i < ndigits; ++i) 
            {
                //std::cout << "ATOF " << i << ": " << numbers[i] << std::endl;
                double d = atof(first[i]);
                this->val += *reinterpret_cast<int*>(&d);
            }  
        }
    };
    
    ///////////////////////////////////////////////////////////////////////////
    struct strtod_test : test::base
    {        
        void benchmark()
        {
            for (int i = 0; i < ndigits; ++i) 
            {
                //std::cout << "STRTOD " << i << ": " << numbers[i] << std::endl;
                char *e;
                double d = strtod(first[i], &e);
                if (e != last[i]) {
                    std::cerr << "strtod failed on " << first[i] << " at " << e;
                    exit(1);
                }
                this->val += *reinterpret_cast<int*>(&d);
            }
        }
    };

    ///////////////////////////////////////////////////////////////////////////
    struct double_conv_test : test::base
    {
        static double parse(char const* first, char const* last) {
            using ::double_conversion::StringToDoubleConverter;
            static const StringToDoubleConverter conv(
                StringToDoubleConverter::ALLOW_TRAILING_JUNK,
                0, 0,
                "Inf", "NaN");
            int used;
            int len = last - first;
            double d = conv.StringToDouble(first, len, &used);
            if (used != len) {
                std::cerr << "double-conversion failed on " << first << " at " << first + used;
                exit(1);
            }
            return d;
        }

        void benchmark()
        {
            for (int i = 0; i < ndigits; ++i) 
            {
                //std::cout << "DC " << i << ": " << numbers[i] << std::endl;
                double d = parse(first[i], last[i]);
                this->val += *reinterpret_cast<int*>(&d);
            }
        }
    };

    ///////////////////////////////////////////////////////////////////////////
    struct spirit_double_test : test::base
    {
        static double parse(char const* first, char const* last)
        {
            double n;
            namespace qi = boost::spirit::qi;
            using qi::double_;
            qi::parse(first, last, double_, n);
            return n;
        }

        void benchmark()
        {
            for (int i = 0; i < ndigits; ++i) 
            {
                //std::cout << "QI " << i << ": " << numbers[i] << std::endl;
                double d = parse(first[i], last[i]);
                this->val += *reinterpret_cast<int*>(&d);
            }
        }
    };
}

int main()
{   
    std::cout << "///////////////////////////////////////////////////////////////////////////" << std::endl;
    std::cout << "Numbers to test:" << std::endl;
    for (int i = 0; i < ndigits; ++i)
    {
        first[i] = numbers[i].c_str();
        last[i] = strchr(first[i], '\0');
        std::cout << numbers[i] << std::endl;
    }
    std::cout.precision(17);
    std::cout << "///////////////////////////////////////////////////////////////////////////" << std::endl;
    std::cout << "atof/strtod/qi.double results:" << std::endl;
    for (int i = 0; i < ndigits; ++i)
    {
        std::cout 
            << atof(first[i]) << ','
            << strtod(first[i], const_cast<char**>(&last[i])) << ','
            << double_conv_test::parse(first[i], last[i]) << ','
            << spirit_double_test::parse(first[i], last[i]) << ','
            << std::endl;
    }
    std::cout << "///////////////////////////////////////////////////////////////////////////" << std::endl;

    BOOST_SPIRIT_TEST_BENCHMARK(
        100,     // This is the maximum repetitions to execute
        (atof_test)
        (strtod_test)
        (double_conv_test)
        (spirit_double_test)
    )
    
    // This is ultimately responsible for preventing all the test code
    // from being optimized away.  Change this to return 0 and you
    // unplug the whole test's life support system.
    return test::live_code != 0;
}

